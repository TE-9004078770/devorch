# Temporary namespace for test (Suenaga)
kind: Namespace
apiVersion: v1
metadata:
  name: test-ns
  labels:
    name: test-ns
    istio-injection: enabled
---
# Service account for capture-image-frontend (by Suenaga)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-sa
  namespace: test-ns
---
# Role for capture-image-frontend (by Suenaga)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-role
  namespace: test-ns
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
---
# RoleBinding for capture-image-frontend (by Suenaga)
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-sa-rolebinding
  namespace: test-ns
subjects:
  - kind: ServiceAccount
    name: test-sa
roleRef:
  kind: Role
  name: test-role
  apiGroup: rbac.authorization.k8s.io
---

# Launch image edit on k8s worker node
apiVersion: v1
kind: Pod
metadata:
  name: image-processing-service
  labels:
    app.kubernetes.io/name: image-processing-service
spec:
  nodeName: jps00009858 # schedule pod to specific node
  containers:
  - name: image-processing-service
    image: deviceorch.azurecr.io/image-processing-service:v0.2
    securityContext:
      privileged: true
      runAsUser: 0
    ports:
    - containerPort: 8022
      hostPort: 8022
    imagePullPolicy: IfNotPresent
  imagePullSecrets:
    - name: acr-secret
---
# Service for image-processing-service
apiVersion: v1
kind: Service
metadata:
  name: image-processing-service
spec:
  selector:
    app.kubernetes.io/name: image-processing-service
  ports:
    - name: http
      protocol: TCP
      port: 8022
      targetPort: 8022
---
# Start image capture on rpi4
apiVersion: v1
kind: Pod
metadata:
  name: capture-image-service
  labels:
    app.kubernetes.io/name: capture-image-service
  annotations:
    sidecar.istio.io/proxyCPU: 16m
    sidecar.istio.io/proxyMemory: 64Mi
    sidecar.istio.io/proxyCPULimit: 64m
    sidecar.istio.io/proxyMemoryLimit: 256Mi
spec:
  nodeName: zcu102 # schedule pod to specific node
  containers:
  - name: capture-image-service
    image: deviceorch.azurecr.io/capture-image-service:v0.2
    securityContext:
        privileged: true
    imagePullPolicy: IfNotPresent
    ports:
      - containerPort: 8080
        hostPort: 8080
    volumeMounts:
    - mountPath: /usr
      name: usr
    - mountPath: /dev
      name: dev
    - mountPath: /lib
      name: lib
    - mountPath: /run/udev
      name: udev
    - mountPath: /gallery
      name: gallery
  volumes:
    - name: usr
      hostPath:
        path: /usr
        type: Directory
    - name: dev
      hostPath:
        path: /dev
        type: Directory
    - name: lib
      hostPath:
        path: /lib
        type: Directory
    - name: udev
      hostPath:
        path: /run/udev
        type: Directory
    - name: gallery
      hostPath:
        path: /gallery
        type: Directory
  imagePullSecrets:
    - name: acr-secret
---
# Service for capture-image-service (by Suenaga)
apiVersion: v1
kind: Service
metadata:
  name: capture-image-service
spec:
  selector:
    app.kubernetes.io/name: capture-image-service
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Start capture-image-frontend
apiVersion: v1
kind: Pod
metadata:
  name: capture-image-frontend
  namespace: test-ns
  labels:
    app.kubernetes.io/name: capture-image-frontend
spec:
  nodeName: jps00009858 # schedule pod to specific node
  containers:
  - name: capture-image-frontend
    image: deviceorch.azurecr.io/capture-image-frontend:v0.2
    ports:
    - containerPort: 80
      hostPort: 8021
    imagePullPolicy: IfNotPresent
  serviceAccountName: test-sa # for test (by Suenaga)
  imagePullSecrets:
    - name: acr-secret
---
# Service for capture-image-frontend (by Suenaga)
apiVersion: v1
kind: Service
metadata:
  name: capture-image-frontend
  namespace: test-ns
spec:
  selector:
    app.kubernetes.io/name: capture-image-frontend
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
#---
# Start capture-image-frontend-digital-twin on k8s-02
#apiVersion: v1
#kind: Pod
#metadata:
#  name: capture-image-frontend-digital-twin
#spec:
#  nodeName: k8s-02 # schedule pod to specific node
#  containers:
#  - name: index-html-capture-image-frontend-digital-twin
#    image: capture-image-frontend-digital-twin:v0.2
#    ports:
#    - containerPort: 80
#      hostPort: 8081
#    imagePullPolicy: IfNotPresent
